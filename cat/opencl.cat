OpenCL
// Modified from: https://github.com/herd/herdtools7/blob/master/herd-www/cat_includes/opencl_base.cat

// Base relations:
// swi: same work-item = same thread
// incl_wg: same work-group
// incl_dev: same device
// syncbar: same barrier id, reuse from spirv because the ptx's sync_barrier requires scta.

// Tags:
// WI: work-item
// WG: work-group
// DEV: device
// ALL: all-svm-devices
// GLOBAL: global
// LOCAL: local, "For local memory, all visibility is constrained to within a given work-group and scopes wider than memory_scope_work_group carry no additional meaning."
// EF: entry fence of barrier
// XF: exit fence of barrier

(* Inclusive scopes *)
let incl = (int & (WI * WI)) |
    (incl_wg & (WG * WG)) |
    (incl_dev & (DEV * DEV)) |
    (ALL * ALL)

(*******************)
(* Synchronisation *)
(*******************)

let acq_op = (ACQ | SC | ACQ_REL) & (R | F | RMW)
let rel_op = (REL | SC | ACQ_REL) & (W | F | RMW)

(* Release sequence *)
let rs = (_ * RMW) | int
let max_co = co? & rs & ~((co & ~rs) ; co)

(* Including release-acquire fences *)
let relf = [rel_op]; ([F]; po)?; [A & W]
let acqf = [A & R]; (po; [F])?; [acq_op]

(* Release-acquire synchronisation *)
let ra_sw_g = incl & (~int) & ([GLOBAL]; relf; max_co; [GLOBAL]; rf; acqf; [GLOBAL])
let ra_sw_l = incl & (~int) & ([LOCAL]; relf; max_co; [LOCAL]; rf; acqf; [LOCAL])

(* Barrier synchronisation *)
// in OpenCL a barrier results in two fence operations: entry and exit fences:
// https://registry.khronos.org/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_work_group_functions
let bar_sw_g = (EF * XF) & syncbar & (~int) & incl_wg & (GLOBAL * GLOBAL)
let bar_sw_l = (EF * XF) & syncbar & (~int) & incl_wg & (LOCAL * LOCAL)

(* Synchronisation on a region *)
let region_sw_g = ra_sw_g | bar_sw_g
let region_sw_l = ra_sw_l | bar_sw_l

(* Allowed to synchronise on the other region *)
let scf = (SC * SC) | ((GLOBAL & LOCAL & F) * (GLOBAL & LOCAL & F))

(* Global and local synchronises-with *)
let gsw = region_sw_g | (scf & region_sw_l)
let lsw = region_sw_l | (scf & region_sw_g)

(******************)
(* Happens-before *)
(******************)

(* Global and local happens-before *)
let ghb = (((GLOBAL * GLOBAL) & (po | (IW * (_ \ IW)))) | gsw)+ // !I
let lhb = (((LOCAL * LOCAL) & (po | (IW * (_ \ IW)))) | lsw)+ // !I

acyclic ghb as global_hb_acyclic
acyclic lhb as local_hb_acyclic

(* Per-location happens-before *)
let ghbl = ghb & loc
let lhbl = lhb & loc

(*************)
(* Coherence *)
(*************)

let coh_hb_g = (rf^-1)?; co; rf?; ghb
let coh_hb_l = (rf^-1)?; co; rf?; lhb
irreflexive coh_hb_g as global_coherence
irreflexive coh_hb_l as local_coherence

(************************)
(* Consistency of reads *)
(************************)

(* Visible side effects *)
let vse_hbl_g = (W * R) & ghbl & ~(ghbl; [W]; ghbl)
let vse_hbl_l = (W * R) & lhbl & ~(lhbl; [W]; lhbl)
let gvse = [GLOBAL]; vse_hbl_g
let lvse = [LOCAL]; vse_hbl_l

(* A non-atomic load can only read from a store that is visible. *)
// nonatomicloc -> NA
irreflexive rf; [NA & GLOBAL]; ~(gvse^-1) as global_nonatomic_rf_consistent
irreflexive rf; [NA & LOCAL]; ~(lvse^-1) as local_nonatomic_rf_consistent

(* An atomic load can only read from a store that already happened. *)
irreflexive (ghb | lhb); rf; [A] as atomic_rf_consistent

(* Consistency of RMWs *)
irreflexive rf | (fr;co) | (co;rf) as rmw_consistent

(**************************)
(* Sequential consistency *)
(**************************)

let sc1 = rf^-1; [SC]; co
let sc2 = [F]; po; co; po; [F]
let sc3 = [F]; po; fr; po; [F]
let sc4 =          fr; po; [F]
let sc5 = [F]; po; fr

let scp = (SC * SC) & (ghb | lhb | co | sc1 | sc2 | sc3 | sc4 | sc5)

let sc6 = rf^-1; (ghb | lhb); [W]


// https://github.com/herd/herdtools7/blob/master/herd-www/cat_includes/opencl.cat

(* BEGIN PARTIAL SC STUFF *)
let p_sc = scp & sc6
let x_exists = [_] ; [SC & (_ \ ALL)]; [_]
acyclic p_sc & x_exists as S_exists
(* END PARTIAL SC STUFF *)

(***************)
(*    Races    *)
(***************)

let conflict =  ((W * _) | (_ * W)) & loc

let gl_hb = ghb | lhb
let dr = conflict & ~(gl_hb | gl_hb^-1) & ~incl
flag ~empty dr as data_race

let ur = (int & conflict & ~(po | po^-1)) \ id
flag ~empty ur as unsequenced_race

let bsw = bar_sw_g | bar_sw_l
// let bd = [EF] & ((~int & incl_wg & ~(bar_sw_g | bar_sw_l)); [_]) // opencl_total
let bd = [EF] & ((~int & incl_wg); [_]) \ (bsw; [_]) // unv == [_]?
flag ~empty bd as barrier_divergence
